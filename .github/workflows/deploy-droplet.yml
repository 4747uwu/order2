name: Deploy to DigitalOcean Droplet

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to droplet
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DROPLET_HOST }}
        username: ${{ secrets.DROPLET_USER }}
        password: ${{ secrets.DROPLET_PASSWORD }}
        script: |
          # ‚úÖ INSTALL DOCKER & DOCKER COMPOSE IF NOT PRESENT
          if ! command -v docker &> /dev/null; then
            echo "üîß Installing Docker..."
            apt update
            apt install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
            add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            apt update
            apt install -y docker-ce docker-ce-cli containerd.io
            systemctl start docker
            systemctl enable docker
            echo "‚úÖ Docker installed"
          else
            echo "‚úÖ Docker already present"
          fi
          
          if ! command -v docker-compose &> /dev/null; then
            echo "üîß Installing Docker Compose..."
            curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
            echo "‚úÖ Docker Compose installed"
          else
            echo "‚úÖ Docker Compose already present"
          fi

          # Create and navigate to project directory
          mkdir -p /opt/medical-project
          cd /opt/medical-project
          
          # Clean up and get fresh code
          rm -rf order2
          git clone https://github.com/4747uwu/order2.git
          
          # Navigate to the MedicalProject subdirectory
          cd order2/MedicalProject
          
          # ‚úÖ FIXED: Create production environment file with LOCAL MongoDB
          cat > .env << 'EOF'
          NODE_ENV=production
          MONGODB_URI=mongodb://admin:StrongPass123!@mongo-rs:27017/?authSource=admin&replicaSet=rs0
          REDIS_URL=rediss://default:ATDmAAIjcDFlY2U3MzZmZjIxNDQ0YmZmYmY0NmVlZTBhMjgwOTkyYnAxMA@just-pug-12518.upstash.io:6379
          JWT_SECRET=your_jwt_secret_for_day_2_auth
          SMTP_HOST=smtp.gmail.com
          SMTP_PORT=587
          SMTP_USER=pawrangerskyler@gmail.com
          SMTP_PASS=cnuw_zttj_vzsx_dbxh
          SENDER_EMAIL=pawrangerskyler@gmail.com
          WASABI_ACCESS_KEY=EMJYIRHNX3687Z1HDF9R
          WASABI_SECRET_KEY=n2ZP0zoTSCOmQ5vo20zteAQGcg9XNjO7br4idAOe
          WASABI_REGION=ap-southeast-1
          WASABI_ENDPOINT=https://s3.ap-southeast-1.wasabisys.com
          WASABI_DICOM_BUCKET=diacom
          WASABI_DOCUMENTS_BUCKET=medicaldocuments
          WASABI_REPORTS_BUCKET=diacomreports
          WASABI_BACKUPS_BUCKET=medical-backups
          
          EOF
          
          # ‚úÖ SAFE: Only stop our project containers (preserve existing services)
          echo "=== Gentle cleanup ==="
          docker-compose -f docker-compose.prod.yml stop backend frontend 2>/dev/null || echo "No existing project containers to stop"
          docker-compose -f docker-compose.prod.yml rm -f backend frontend 2>/dev/null || echo "No existing project containers to remove"
          
          # Build only backend and frontend (skip Orthanc since it's running externally)
          echo "=== Building backend and frontend ==="
          if ! docker-compose -f docker-compose.prod.yml build --no-cache backend frontend; then
            echo "‚ùå Build failed! Checking logs..."
            docker-compose -f docker-compose.prod.yml logs backend frontend
            exit 1
          fi
          
          # Start only backend and frontend
          echo "=== Starting backend and frontend ==="
          if ! docker-compose -f docker-compose.prod.yml up -d backend frontend; then
            echo "‚ùå Container startup failed! Checking logs..."
            docker-compose -f docker-compose.prod.yml logs backend frontend
            exit 1
          fi
          
          # Wait for containers to start
          sleep 15
          
          # Show all running containers
          echo "=== All Running Containers ==="
          docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
          
          # Check our project containers specifically
          echo "=== Medical Project Status ==="
          docker-compose -f docker-compose.prod.yml ps backend frontend
          
          # Check logs for any errors
          echo "=== Recent Container Logs ==="
          docker-compose -f docker-compose.prod.yml logs --tail=50 backend frontend
          
          # Install and check ports
          apt update && apt install -y net-tools
          echo "=== Listening Ports ==="
          netstat -tlnp | grep -E ':(80|3000|4000|8042|27017)' || echo "No services listening on target ports"
          
          # Clean up old images
          docker image prune -f
          
          echo "‚úÖ Deployment complete! Preserved: Orthanc, OHIF, MongoDB"